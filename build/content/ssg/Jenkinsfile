#!/usr/bin/env groovy

import groovy.json.JsonSlurper
@Library("github.com/RedHatInsights/insights-pipeline-lib@v3")

def notify(subject, body, color) {
    message = subject
    if (body != null) {
        message += " | ${body}"
    }

    slackSend message: message, color: color, channel: '#remediations'
}

def notifyOnFailure(Closure step) {
    try {
        step()
    } catch (e) {
        notify("@***REMOVED*** [${env.JOB_NAME.split('/')[-1]}] Build failed", "See ${env.BUILD_URL}console", "danger")
        throw e
    }
}

def resolveRevision (branch) {
    def content = sh(returnStdout: true, script: "curl https://api.github.com/repos/${REPOSITORY}/commits/${REVISION}").trim()
    return new JsonSlurper().parseText(content).sha
}

node ('openscap') {
    notifyOnFailure {
        env.NODEJS_HOME = "${tool 'node-10'}"
        env.PATH="${env.NODEJS_HOME}/bin:${env.PATH}"

        sh 'oc whoami'
        sh 'node -v'
        sh 'npm -v'

        REVISION = resolveRevision(REVISION)
        echo REVISION

        notify("[${env.JOB_NAME.split('/')[-1]}] Building ${REVISION}", null, "#439FE0")

        stage('checkout scm') {
            /*
            checkout poll:false, scm: [
                $class: 'GitSCM',
                branches: [[name: "ssg-2.0"]],
                userRemoteConfigs: [[
                    url: 'git@github.com:RedHatInsights/insights-remediations',
                    credentialsId: 'insightsdroid-ssh-git'
                ]]
            ]
            */
            checkout scm
        }

        stage('fetch content') {
            sh 'mkdir content'
            sh 'curl -s -L "https://github.com/${REPOSITORY}/tarball/${REVISION}" --output - | tar xz -C content;'
            sh 'mv content/* source'
        }

        stage('build remediations') {
            sh 'npm ci'
        }

        stage('build OpenSCAP') {
            sh 'mkdir -p artifacts/playbooks'
            sh "echo ${REVISION} > artifacts/playbooks/revision.txt";

            dir('source') {
                sh 'for i in rhel6 rhel7 rhel8; do ./build_product $i; mkdir ../artifacts/playbooks/$i; mv build/$i/playbooks ../artifacts/playbooks/$i; done'
            }
        }

        stage('validate templates') {
            sh "node src/validateTemplate.js \$(find artifacts/playbooks/ -path '*/playbooks/*/*.yml')"
        }

        stage('build Nginx configuration') {
            sh "echo 'location /playbooks { autoindex on; disable_symlinks on; add_header X-SSG-VERSION ${REVISION}; }' > artifacts/default.conf"
        }

        stage('build Nginx image') {
            sh 'ls -l artifacts/playbooks'
            sh "oc start-build playbooks-ssg -n buildfactory --from-dir=artifacts --follow -w"
        }

        openShiftUtils.withJnlpNode(image: "jenkins-deploy-jnlp:latest") {
            stage('push image to quay.io') {
                def srcNamespace = "buildfactory"
                def srcBaseUri = "docker://registry.insights-dev.openshift.com/" + srcNamespace + "/"
                def dstBaseUri = "docker://quay.io/cloudservices/"
                def srcTokenId = "buildfactoryDeployerToken"
                def dstUser = "cloudservices+push"
                def dstTokenId = "quay-cloudservices-push-token"
                // trim commit hash to 7 chars
                def commitId = REVISION[0..6]
                sh "oc tag playbooks-ssg:latest playbooks-ssg:${commitId} -n ${srcNamespace}"
                // TODO: when a stable branch exists, copy qa from that one instead of 'latest'
                def tags = ["latest", commitId, "qa"]
                tags.each { t ->
                    deployUtils.skopeoCopy(
                        srcUri: srcBaseUri + "playbooks-ssg:${t}",
                        dstUri: dstBaseUri + "playbooks-ssg:${t}",
                        srcUser: "na",
                        srcTokenId: srcTokenId,
                        dstUser: dstUser,
                        dstTokenId: dstTokenId
                    )
                }

            }

            stage('import the qa image in the qa namespace') {
                sh 'oc tag -n remediations-qa quay.io/cloudservices/playbooks-ssg:qa playbooks-ssg:qa'
            }

            notify("[${env.JOB_NAME.split('/')[-1]}] Built and promoted to stage", null, "good")
        }
    }
}
